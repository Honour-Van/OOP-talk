/**
 * @author 范皓年 2301213349
 * @date 2024/06/16
*/

#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <cassert>

using namespace std;

typedef std::string 名;
typedef std::string 主公;
typedef vector<string> 毗邻势力;
typedef vector<string> 跨有之地;

enum 实力
{
    强盛,
    匹敌,
    暗弱,
    未可知也
};

enum 与我为盟
{
    为我盟,
    非我盟
};

enum 物产
{
    丰饶,
    不得而知
};

class 天下势力
{
public:
    天下势力() : 名_(""), 主公_(""), 实力_(未可知也), 与我为盟_(非我盟), 物产_(不得而知) {}

    天下势力(名 名, 主公 主公, 实力 实力, 与我为盟 与我为盟, 物产 物产丰富,
             毗邻势力 毗邻 = 毗邻势力(), 跨有之地 跨有 = 跨有之地())
        : 名_(名), 主公_(主公), 实力_(实力), 与我为盟_(与我为盟), 物产_(物产丰富), 毗邻势力_(毗邻), 跨有之地_(跨有)
    {
    }

    void 与之毗邻(string 势力)
    {
        毗邻势力_.push_back(势力);
    }

    void 跨有(string 地)
    {
        跨有之地_.push_back(地);
    }

    名 其名()
    {
        return 名_;
    }

    void 名为(名 新名)
    {
        名_ = 新名;
    }

    主公 其主公()
    {
        return 主公_;
    }

    void 主公为(主公 新主公)
    {
        主公_ = 新主公;
    }

    实力 其实力()
    {
        return 实力_;
    }

    void 实力为(实力 新实力)
    {
        实力_ = 新实力;
    }

    与我为盟 其与我为盟()
    {
        return 与我为盟_;
    }

    bool 其与我为盟否()
    {
        return 与我为盟_ == 为我盟;
    }

    void 与我结盟()
    {
        与我为盟_ = 为我盟;
    }

    void 与我解盟()
    {
        与我为盟_ = 非我盟;
    }

    物产 其物产()
    {
        return 物产_;
    }

    bool 其物产丰饶否()
    {
        return 物产_ == 丰饶;
    }

    void 物产为(物产 新物产)
    {
        物产_ = 新物产;
    }

    毗邻势力 其毗邻势力()
    {
        return 毗邻势力_;
    }

    跨有之地 其跨有之地()
    {
        return 跨有之地_;
    }

private:
    名 名_;
    主公 主公_;
    实力 实力_;
    与我为盟 与我为盟_;
    物产 物产_;
    毗邻势力 毗邻势力_;
    跨有之地 跨有之地_;
};

map<名, 天下势力> 势力图;

void 豪杰并起()
{
    势力图["袁"] = 天下势力("袁", "袁绍", 未可知也, 非我盟, 不得而知);
    势力图["魏"] = 天下势力("魏", "曹操", 强盛, 非我盟, 不得而知);
    势力图["吴"] = 天下势力("吴", "孙权", 匹敌, 非我盟, 丰饶);
    势力图["荆州"] = 天下势力("荆州", "刘表", 暗弱, 非我盟, 不得而知);
    势力图["汉中"] = 天下势力("汉中", "张鲁", 暗弱, 非我盟, 丰饶);
    势力图["益州"] = 天下势力("益州", "刘璋", 暗弱, 非我盟, 丰饶);
    势力图["蜀"] = 天下势力("蜀", "刘备", 匹敌, 为我盟, 不得而知);
}

void 曹操克绍()
{
    势力图["袁"].实力为(暗弱);
    势力图["魏"].实力为(强盛);
    势力图["魏"].跨有("袁");
    if (势力图["魏"].其实力() == 强盛)
    {
        cout << 势力图["魏"].其名() << ": 此诚不可与争锋" << endl;
    }
}

void 孙权据有江东()
{
    势力图["吴"].跨有("江东");
    if (势力图["吴"].其物产丰饶否() == 丰饶 && 势力图["吴"].其实力() == 匹敌)
    {
        cout << 势力图["吴"].其名() << ": 此可以为援而不可图也" << endl;
    }
}

void 荆州之状()
{
    势力图["荆州"].与之毗邻("汉");
    势力图["荆州"].与之毗邻("沔");
    势力图["荆州"].与之毗邻("南海");
    势力图["荆州"].与之毗邻("吴");
    势力图["荆州"].与之毗邻("蜀");
    if (势力图["荆州"].其实力() == 暗弱 && 势力图["荆州"].其主公() == "刘表")
    {

        cout << 势力图["荆州"].其名() << ": 此用武之国而其主不能守" << endl;
    }
}

void 益州之状()
{
    assert(势力图["益州"].其物产丰饶否());
    势力图["益州"].与之毗邻("汉中");
    if (势力图["益州"].其实力() == 暗弱)
    {
        cout << 势力图["益州"].其名() << ": 智能之士思得明君" << endl;
    }
}

void 发兵(名 势力, 名 地)
{
    cout << 势力 << "发兵攻打" << 地 << endl;
}

bool 图霸业()
{
    势力图["蜀"].跨有("荆州");
    势力图["蜀"].跨有("益州");
    势力图["吴"].与我结盟();
    assert(势力图["吴"].其与我为盟否());
    if ("天下有变")
    {
        cout << "天下有变：" << endl;
        发兵("荆州", "宛、洛");
        发兵("益州", "秦川");
    }
    return true;
}

string 亮曰()
{
    豪杰并起(); // 初始化函数

    曹操克绍();
    孙权据有江东();

    荆州之状();

    益州之状();

    if (图霸业())
    {
        return "霸业已成";
    }
    else
    {
        return "未能成也";
    }
}

int main()
{
    cout << 亮曰() << endl;
}
